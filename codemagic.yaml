workflows:
  kivy-ios-unsigned:
    name: Beluga Chat
    environment:
      xcode: latest
      vars:
        APP_NAME: "beluga_chat_sapp"
        BUNDLE_ID: "com.beluga.chatt"
        KIVY_IOS_VERSION: "1.3.0" # Phi√™n b·∫£n ·ªïn ƒë·ªãnh h∆°n

    scripts:
      - name: C√†i to√†n b·ªô c√¥ng c·ª• build c·∫ßn thi·∫øt
        script: |
          brew update
          brew install python@3.9 autoconf automake libtool pkg-config gettext gawk bash git
          brew link --overwrite automake autoconf libtool gettext
          
          echo "‚úÖ Ki·ªÉm tra tool:"
          which automake && automake --version
          which autoconf && autoconf --version
          which libtool && libtool --version
          which pkg-config && pkg-config --version
          
          # C√†i ƒë·∫∑t c√°c c√¥ng c·ª• v√† bi·∫øn m√¥i tr∆∞·ªùng c·∫ßn thi·∫øt cho qu√° tr√¨nh build Python
          export PATH="/usr/local/opt/gettext/bin:$PATH"
          brew install openssl@1.1 sdl2 sdl2_image sdl2_ttf sdl2_mixer
          ln -sf /usr/local/Cellar/openssl@1.1/*/lib/libssl.1.1.dylib /usr/local/lib/ || true
          ln -sf /usr/local/Cellar/openssl@1.1/*/lib/libcrypto.1.1.dylib /usr/local/lib/ || true

      - name: C√†i kivy-ios v√† dependencies
        script: |
          python3 -m pip install --upgrade pip
          pip3 install wheel virtualenv Cython
          pip3 install kivy-ios==$KIVY_IOS_VERSION
          
          # Th√¥ng tin phi√™n b·∫£n
          echo "Using kivy-ios version: $KIVY_IOS_VERSION"
          
          # X√≥a cache c≈© n·∫øu c√≥ ƒë·ªÉ clean build
          rm -rf ~/.kivy-ios/build/* || true
          rm -rf ~/.kivy-ios/dist/* || true

      - name: Chu·∫©n b·ªã th∆∞ m·ª•c build
        script: |
          mkdir -p $CM_BUILD_DIR/iosbuild
          cd $CM_BUILD_DIR/iosbuild

      - name: Build iOS dependencies
        script: |
          cd $CM_BUILD_DIR/iosbuild
          
          # Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng build
          export MAKEFLAGS="-j2"
          export KIVY_IOS_JOBS=2
          export SDKROOT=$(xcrun --sdk iphoneos --show-sdk-path)
          export IPHONEOS_DEPLOYMENT_TARGET=10.0
          export MACOSX_DEPLOYMENT_TARGET=10.15
          export PKG_CONFIG_PATH="/usr/local/opt/openssl@1.1/lib/pkgconfig:/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH"
          export CFLAGS="-I/usr/local/include -I/usr/local/opt/openssl@1.1/include"
          export LDFLAGS="-L/usr/local/lib -L/usr/local/opt/openssl@1.1/lib"
          
          echo "üîß Thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng build:"
          echo "SDKROOT: $SDKROOT"
          echo "IPHONEOS_DEPLOYMENT_TARGET: $IPHONEOS_DEPLOYMENT_TARGET"
          echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
          
          # Build t·ª´ng dependency theo th·ª© t·ª± - ph∆∞∆°ng ph√°p c·∫©n th·∫≠n
          for recipe in libffi openssl; do
            echo "üì¶ Building $recipe..."
            toolchain build $recipe || {
              echo "‚ö†Ô∏è Th·ª≠ l·∫°i $recipe sau khi x√≥a cache..."
              rm -rf ~/.kivy-ios/build/$recipe
              rm -rf ~/.kivy-ios/dist/$recipe
              toolchain build $recipe || echo "‚ö†Ô∏è Th·∫•t b·∫°i v·ªõi $recipe, ti·∫øp t·ª•c x·ª≠ l√Ω..."
            }
          done
          
          # PYTHON BUILD - ƒêo·∫°n quan tr·ªçng nh·∫•t
          echo "üì¶ Building python3 v·ªõi CFLAGS/LDFLAGS ƒë·∫∑c bi·ªát..."
          export _PYTHON_HOST_PLATFORM=darwin
          export PYTHONPATH=$(pwd)
          export CC=$(xcrun -find -sdk iphoneos clang)
          
          # Build python3 v·ªõi t√πy ch·ªçn ƒë·∫∑c bi·ªát
          toolchain build python3 || {
            echo "‚ö†Ô∏è Th·ª≠ l·∫°i python3 v·ªõi ph∆∞∆°ng ph√°p ƒë·∫∑c bi·ªát..."
            rm -rf ~/.kivy-ios/build/python3
            rm -rf ~/.kivy-ios/dist/python3
            
            # Th·ª≠ ph∆∞∆°ng ph√°p th·ª© 2 - s·ª≠a tr·ª±c ti·∫øp source code
            KIVY_IOS_ROOT=$(pip3 show kivy-ios | grep Location | cut -d ' ' -f 2)/kivy_ios
            cd $KIVY_IOS_ROOT
            echo "Patching Python3 recipe..."
            
            # T·∫°o file patch_python.py b·∫±ng l·ªánh echo
            echo 'import os' > patch_python.py
            echo 'import fileinput' >> patch_python.py
            echo '' >> patch_python.py
            echo 'recipe_file = "recipes/python3/__init__.py"' >> patch_python.py
            echo 'if os.path.exists(recipe_file):' >> patch_python.py
            echo '    print("Patching Python3 recipe...")' >> patch_python.py
            echo '    with fileinput.FileInput(recipe_file, inplace=True) as file:' >> patch_python.py
            echo '        for line in file:' >> patch_python.py
            echo '            # S·ª≠a c√°c l·ªói t∆∞∆°ng th√≠ch' >> patch_python.py
            echo '            if "def get_recipe_env" in line:' >> patch_python.py
            echo '                print(line, end="")' >> patch_python.py
            echo '                print("        env[\\\"_PYTHON_HOST_PLATFORM\\\"] = \\\"darwin\\\"")' >> patch_python.py
            echo '                print("        env[\\\"PYTHONPATH\\\"] = os.getcwd()")' >> patch_python.py
            echo '            else:' >> patch_python.py
            echo '                print(line, end="")' >> patch_python.py
            echo '    print("Done patching Python3 recipe")' >> patch_python.py
            echo 'else:' >> patch_python.py
            echo '    print("Python3 recipe file not found")' >> patch_python.py

            python3 patch_python.py
            
            # Build python3 sau khi patch
            cd $CM_BUILD_DIR/iosbuild
            toolchain build python3 || {
              echo "‚ùå L·ªói Python3 - S·ª≠ d·ª•ng kivy-ios phi√™n b·∫£n c≈© h∆°n ho·∫∑c s·ª≠ d·ª•ng image c√≥ c·∫•u h√¨nh kh√°c"
              exit 1
            }
          }
          
          # Build kivy
          echo "üì¶ Building kivy..."
          toolchain build kivy || {
            echo "‚ö†Ô∏è Th·ª≠ l·∫°i kivy sau khi x√≥a cache..."
            rm -rf ~/.kivy-ios/build/kivy
            rm -rf ~/.kivy-ios/dist/kivy
            toolchain build kivy || {
              echo "‚ùå L·ªói Kivy - Kh√¥ng th·ªÉ ti·∫øp t·ª•c"
              exit 1
            }
          }
          
          # Ki·ªÉm tra xem ƒë√£ build ƒë·ªß dependencies ch∆∞a
          if [ ! -d ~/.kivy-ios/dist/python3 ]; then
            echo "‚ùå Thi·∫øu Python3, kh√¥ng th·ªÉ ti·∫øp t·ª•c"
            exit 1
          fi
          
          if [ ! -d ~/.kivy-ios/dist/kivy ]; then
            echo "‚ùå Thi·∫øu Kivy, kh√¥ng th·ªÉ ti·∫øp t·ª•c"
            exit 1
          fi
          
          echo "‚úÖ ƒê√£ build xong dependencies ch√≠nh"

      - name: T·∫°o project t·ª´ source
        script: |
          cd $CM_BUILD_DIR/iosbuild
          
          # Ki·ªÉm tra file main.py
          if [ -f "../kivy_chat_app/main.py" ]; then
            echo "‚úÖ Using main.py from kivy_chat_app"
            toolchain create $APP_NAME ../kivy_chat_app/main.py
          elif [ -f "../main.py" ]; then
            echo "‚úÖ Using main.py from root"
            toolchain create $APP_NAME ../main.py
          else
            echo "‚ùå main.py not found"
            find .. -name "main.py"
            exit 1
          fi
          
          # Build app
          echo "‚è≥ Building app..."
          toolchain build $APP_NAME || {
            echo "‚ö†Ô∏è Th·∫•t b·∫°i v·ªõi build app, th·ª≠ l·∫°i kh√¥ng clean..."
            toolchain build $APP_NAME
          }

      - name: Chu·∫©n b·ªã Xcode project
        script: |
          cd $CM_BUILD_DIR/iosbuild
          toolchain xcode $APP_NAME
          cd $APP_NAME-ios
          
          PLIST_PATH="$APP_NAME/Info.plist"
          if [ -f "$PLIST_PATH" ]; then
            /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier $BUNDLE_ID" "$PLIST_PATH"
            echo "‚úÖ Updated Bundle ID"
          else
            echo "‚ö†Ô∏è Info.plist not found at $PLIST_PATH"
            find . -name "Info.plist"
            exit 1
          fi

      - name: Build IPA
        script: |
          cd $CM_BUILD_DIR/iosbuild/$APP_NAME-ios
          
          cat > exportOptions.plist <<EOL
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>development</string>
            <key>signingStyle</key>
            <string>manual</string>
          </dict>
          </plist>
          EOL
          
          # Build v√† archive kh√¥ng k√Ω
          xcodebuild -scheme $APP_NAME -configuration Release \
                    -archivePath $APP_NAME.xcarchive archive \
                    CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
                    
          # Export IPA
          xcodebuild -exportArchive -archivePath $APP_NAME.xcarchive \
                    -exportOptionsPlist exportOptions.plist \
                    -exportPath build/Release-iphoneos \
                    CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
          
          echo "‚úÖ Build completed. IPA location:"
          find build -name "*.ipa"

    artifacts:
      - iosbuild/$APP_NAME-ios/build/Release-iphoneos/*.ipa

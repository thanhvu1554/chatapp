workflows:
  kivy-ios-unsigned:
    name: Beluga Chat
    environment:
      xcode: latest
      vars:
        APP_NAME: "beluga_chat_sapp"
        BUNDLE_ID: "com.beluga.chatt"

    scripts:
      - name: C√†i to√†n b·ªô c√¥ng c·ª• build c·∫ßn thi·∫øt
        script: |
          brew update
          brew install python@3.9 autoconf automake libtool pkg-config gettext gawk bash git
          brew link --overwrite automake autoconf libtool gettext
          
          echo "‚úÖ Ki·ªÉm tra tool:"
          which automake && automake --version
          which autoconf && autoconf --version
          which libtool && libtool --version
          which pkg-config && pkg-config --version

      - name: C√†i kivy-ios v√† dependencies
        script: |
          python3 -m pip install --upgrade pip
          pip3 install wheel virtualenv Cython
          pip3 install kivy-ios==2022.07.19
          
          # S·ª≠a l·ªói kivy-ios
          TOOLCHAIN_DIR=$(pip3 show kivy-ios | grep Location | cut -d ' ' -f 2)
          echo "Kivy-iOS path: $TOOLCHAIN_DIR"
          
          # S·ª≠a file kivy-ios/toolchain.py n·∫øu g·∫∑p l·ªói libffi
          cd $TOOLCHAIN_DIR/kivy_ios
          cat > patch_libffi.py << 'EOF'
          import os
          import fileinput

          # Patch file libffi.py ƒë·ªÉ s·ª≠a l·ªói c·∫•u h√¨nh
          recipe_file = 'recipes/libffi/__init__.py'
          if os.path.exists(recipe_file):
              print("Patching libffi recipe...")
              with fileinput.FileInput(recipe_file, inplace=True) as file:
                  for line in file:
                      if 'def get_host(self, arch):' in line:
                          print(line, end='')
                          print('        if "arm64" in arch:')
                          print('            return "aarch64-apple-darwin"')
                      else:
                          print(line, end='')
              print("Done patching libffi recipe")
          else:
              print("libffi recipe file not found")
          EOF
          python3 patch_libffi.py
          
          # X√≥a cache c≈© n·∫øu c√≥ ƒë·ªÉ clean build
          rm -rf ~/.kivy-ios/build/* || true
          rm -rf ~/.kivy-ios/dist/* || true

      - name: Chu·∫©n b·ªã th∆∞ m·ª•c build
        script: |
          mkdir -p $CM_BUILD_DIR/iosbuild
          cd $CM_BUILD_DIR/iosbuild

      - name: Build iOS dependencies
        script: |
          cd $CM_BUILD_DIR/iosbuild
          export MAKEFLAGS="-j2"
          export KIVY_IOS_JOBS=2
          
          # Build c√°c dependencies ch√≠nh x√°c theo th·ª© t·ª±
          echo "üì¶ Building libffi..."
          toolchain build libffi || {
            echo "‚ö†Ô∏è Th·ª≠ l·∫°i libffi sau khi x√≥a cache..."
            rm -rf ~/.kivy-ios/build/libffi
            rm -rf ~/.kivy-ios/dist/libffi
            toolchain build libffi || echo "‚ö†Ô∏è Th·∫•t b·∫°i v·ªõi libffi, ti·∫øp t·ª•c x·ª≠ l√Ω..."
          }
          
          echo "üì¶ Building openssl..."
          toolchain build openssl || {
            echo "‚ö†Ô∏è Th·ª≠ l·∫°i openssl sau khi x√≥a cache..."
            rm -rf ~/.kivy-ios/build/openssl
            rm -rf ~/.kivy-ios/dist/openssl
            toolchain build openssl || echo "‚ö†Ô∏è Th·∫•t b·∫°i v·ªõi openssl, ti·∫øp t·ª•c x·ª≠ l√Ω..."
          }
          
          echo "üì¶ Building python3..."
          toolchain build python3 || {
            echo "‚ö†Ô∏è Th·ª≠ l·∫°i python3 sau khi x√≥a cache..."
            rm -rf ~/.kivy-ios/build/python3
            rm -rf ~/.kivy-ios/dist/python3
            toolchain build python3 || {
              echo "‚ùå L·ªói Python3 - ƒê√¢y l√† th√†nh ph·∫ßn quan tr·ªçng"
              exit 1
            }
          }
          
          echo "üì¶ Building kivy..."
          toolchain build kivy || {
            echo "‚ö†Ô∏è Th·ª≠ l·∫°i kivy sau khi x√≥a cache..."
            rm -rf ~/.kivy-ios/build/kivy
            rm -rf ~/.kivy-ios/dist/kivy
            toolchain build kivy || {
              echo "‚ùå L·ªói Kivy - ƒê√¢y l√† th√†nh ph·∫ßn quan tr·ªçng"
              exit 1
            }
          }
          
          # Ki·ªÉm tra xem ƒë√£ build ƒë·ªß dependencies ch∆∞a
          if [ ! -d ~/.kivy-ios/dist/python3 ]; then
            echo "‚ùå Thi·∫øu Python3, kh√¥ng th·ªÉ ti·∫øp t·ª•c"
            exit 1
          fi
          
          if [ ! -d ~/.kivy-ios/dist/kivy ]; then
            echo "‚ùå Thi·∫øu Kivy, kh√¥ng th·ªÉ ti·∫øp t·ª•c"
            exit 1
          fi
          
          echo "‚úÖ ƒê√£ build xong dependencies ch√≠nh"

      - name: T·∫°o project t·ª´ source
        script: |
          cd $CM_BUILD_DIR/iosbuild
          
          # Ki·ªÉm tra file main.py
          if [ -f "../kivy_chat_app/main.py" ]; then
            echo "‚úÖ Using main.py from kivy_chat_app"
            toolchain create $APP_NAME ../kivy_chat_app/main.py
          elif [ -f "../main.py" ]; then
            echo "‚úÖ Using main.py from root"
            toolchain create $APP_NAME ../main.py
          else
            echo "‚ùå main.py not found"
            find .. -name "main.py"
            exit 1
          fi
          
          # Build app
          echo "‚è≥ Building app..."
          toolchain build $APP_NAME || {
            echo "‚ö†Ô∏è Th·∫•t b·∫°i v·ªõi build app, th·ª≠ l·∫°i kh√¥ng clean..."
            toolchain build $APP_NAME
          }

      - name: Chu·∫©n b·ªã Xcode project
        script: |
          cd $CM_BUILD_DIR/iosbuild
          toolchain xcode $APP_NAME
          cd $APP_NAME-ios
          
          PLIST_PATH="$APP_NAME/Info.plist"
          if [ -f "$PLIST_PATH" ]; then
            /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier $BUNDLE_ID" "$PLIST_PATH"
            echo "‚úÖ Updated Bundle ID"
          else
            echo "‚ö†Ô∏è Info.plist not found at $PLIST_PATH"
            find . -name "Info.plist"
            exit 1
          fi

      - name: Build IPA
        script: |
          cd $CM_BUILD_DIR/iosbuild/$APP_NAME-ios
          
          cat > exportOptions.plist <<EOL
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>development</string>
            <key>signingStyle</key>
            <string>manual</string>
          </dict>
          </plist>
          EOL
          
          # Build v√† archive kh√¥ng k√Ω
          xcodebuild -scheme $APP_NAME -configuration Release \
                    -archivePath $APP_NAME.xcarchive archive \
                    CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
                    
          # Export IPA
          xcodebuild -exportArchive -archivePath $APP_NAME.xcarchive \
                    -exportOptionsPlist exportOptions.plist \
                    -exportPath build/Release-iphoneos \
                    CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
          
          echo "‚úÖ Build completed. IPA location:"
          find build -name "*.ipa"

    artifacts:
      - iosbuild/$APP_NAME-ios/build/Release-iphoneos/*.ipa 

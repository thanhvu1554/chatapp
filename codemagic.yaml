workflows:
  kivy-ios-unsigned:
    name: Beluga Chat
    environment:
      xcode: latest
      vars:
        APP_NAME: "beluga_chat_sapp"
        BUNDLE_ID: "com.beluga.chatt"

    scripts:
      - name: C√†i to√†n b·ªô c√¥ng c·ª• build c·∫ßn thi·∫øt
        script: |
          brew update
          brew install python@3.9 autoconf automake libtool pkg-config gettext gawk bash git
          brew link --overwrite automake autoconf libtool gettext
          
          echo "‚úÖ Ki·ªÉm tra tool:"
          which automake && automake --version
          which autoconf && autoconf --version
          which libtool && libtool --version
          which pkg-config && pkg-config --version

      - name: C√†i kivy-ios v√† dependencies
        script: |
          python3 -m pip install --upgrade pip
          pip3 install wheel virtualenv Cython
          pip3 install kivy-ios==2022.07.19
          
          # S·ª≠a l·ªói kivy-ios
          TOOLCHAIN_DIR=$(pip3 show kivy-ios | grep Location | cut -d ' ' -f 2)
          echo "Kivy-iOS path: $TOOLCHAIN_DIR"
          
          # S·ª≠a file kivy-ios/toolchain.py n·∫øu g·∫∑p l·ªói libffi
          cd $TOOLCHAIN_DIR/kivy_ios
          cat > patch_libffi.py << 'EOL'
import os
import fileinput

# Patch file libffi.py ƒë·ªÉ s·ª≠a l·ªói c·∫•u h√¨nh
recipe_file = 'recipes/libffi/__init__.py'
if os.path.exists(recipe_file):
    print("Patching libffi recipe...")
    with fileinput.FileInput(recipe_file, inplace=True) as file:
        for line in file:
            if 'def get_host(self, arch):' in line:
                print(line, end='')
                print('        if "arm64" in arch:')
                print('            return "aarch64-apple-darwin"')
            else:
                print(line, end='')
    print("Done patching libffi recipe")
else:
    print("libffi recipe file not found")
EOL
          python3 patch_libffi.py

      - name: Chu·∫©n b·ªã th∆∞ m·ª•c build
        script: |
          mkdir -p $CM_BUILD_DIR/iosbuild
          cd $CM_BUILD_DIR/iosbuild

      - name: Build dependencies ri√™ng cho libffi
        script: |
          cd $CM_BUILD_DIR/iosbuild
          echo "üì¶ Building libffi v·ªõi c·∫•u h√¨nh ƒë·∫∑c bi·ªát..."
          export MAKEFLAGS="-j2"
          
          # Tri·ªÉn khai 2 gi·∫£i ph√°p c√≥ th·ªÉ s·ª≠a l·ªói libffi
          
          # Gi·∫£i ph√°p 1: D√πng phi√™n b·∫£n c·ª• th·ªÉ v√† tham s·ªë ƒë·∫∑c bi·ªát
          toolchain build libffi || {
            echo "‚ö†Ô∏è Th·ª≠ l·∫°i v·ªõi tham s·ªë c·ª• th·ªÉ..."
            # X√≥a b·∫£n c√†i ƒë·∫∑t c≈© n·∫øu c√≥
            rm -rf ~/.kivy-ios/build/libffi
            rm -rf ~/.kivy-ios/dist/libffi
            
            # Th·ª≠ v·ªõi tham s·ªë cache_env=False
            toolchain build libffi --cache-env=False || {
              echo "‚ö†Ô∏è V·∫´n th·∫•t b·∫°i, th·ª≠ ph∆∞∆°ng √°n cu·ªëi..."
              # S·ª≠a l·ªói libffi theo c√°ch th·ªß c√¥ng
              KIVY_IOS_ROOT=$(pip3 show kivy-ios | grep Location | cut -d ' ' -f 2)/kivy_ios
              cd $KIVY_IOS_ROOT
              echo "Kivy-iOS root: $KIVY_IOS_ROOT"
              python3 toolchain.py build libffi --cache-env=False || {
                echo "‚ùå Kh√¥ng th·ªÉ build libffi, b·ªè qua v√† th·ª≠ build c√°c dependencies kh√°c..."
              }
            }
          }

      - name: Build c√°c dependencies c√≤n l·∫°i
        script: |
          cd $CM_BUILD_DIR/iosbuild
          export MAKEFLAGS="-j2"
          export KIVY_IOS_JOBS=2
          
          # Th·ª≠ build t·ª´ng g√≥i ri√™ng l·∫ª
          for lib in openssl python3 kivy; do
            echo "üì¶ Building $lib..."
            toolchain build $lib || { 
              echo "‚ö†Ô∏è Th·∫•t b·∫°i l·∫ßn ƒë·∫ßu v·ªõi $lib, th·ª≠ l·∫°i v·ªõi cache_env=False..."
              toolchain build $lib --cache-env=False || {
                echo "‚ùå Build $lib kh√¥ng th√†nh c√¥ng, b·ªè qua..."
              }
            }
          done
          
          # Ki·ªÉm tra xem ƒë√£ build ƒë·ªß dependencies ch∆∞a
          if [ ! -d ~/.kivy-ios/dist/python3 ] || [ ! -d ~/.kivy-ios/dist/kivy ]; then
            echo "‚ùå Thi·∫øu dependencies quan tr·ªçng, kh√¥ng th·ªÉ ti·∫øp t·ª•c"
            exit 1
          fi

      - name: T·∫°o project t·ª´ source
        script: |
          cd $CM_BUILD_DIR/iosbuild
          
          # Ki·ªÉm tra file main.py
          if [ -f "../kivy_chat_app/main.py" ]; then
            echo "‚úÖ Using main.py from kivy_chat_app"
            toolchain create $APP_NAME ../kivy_chat_app/main.py
          elif [ -f "../main.py" ]; then
            echo "‚úÖ Using main.py from root"
            toolchain create $APP_NAME ../main.py
          else
            echo "‚ùå main.py not found"
            find .. -name "main.py"
            exit 1
          fi
          
          # Build app
          echo "‚è≥ Building app..."
          toolchain build $APP_NAME || {
            echo "‚ö†Ô∏è Th·∫•t b·∫°i v·ªõi build app, th·ª≠ l·∫°i..."
            toolchain build $APP_NAME --no-clean
          }

      - name: Chu·∫©n b·ªã Xcode project
        script: |
          cd $CM_BUILD_DIR/iosbuild
          toolchain xcode $APP_NAME
          cd $APP_NAME-ios
          
          PLIST_PATH="$APP_NAME/Info.plist"
          if [ -f "$PLIST_PATH" ]; then
            /usr/libexec/PlistBuddy -c "Set :CFBundleIdentifier $BUNDLE_ID" "$PLIST_PATH"
            echo "‚úÖ Updated Bundle ID"
          else
            echo "‚ö†Ô∏è Info.plist not found at $PLIST_PATH"
            find . -name "Info.plist"
            exit 1
          fi

      - name: Build IPA
        script: |
          cd $CM_BUILD_DIR/iosbuild/$APP_NAME-ios
          
          cat > exportOptions.plist <<EOL
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>development</string>
            <key>signingStyle</key>
            <string>manual</string>
          </dict>
          </plist>
          EOL
          
          # Build v√† archive kh√¥ng k√Ω
          xcodebuild -scheme $APP_NAME -configuration Release \
                    -archivePath $APP_NAME.xcarchive archive \
                    CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
                    
          # Export IPA
          xcodebuild -exportArchive -archivePath $APP_NAME.xcarchive \
                    -exportOptionsPlist exportOptions.plist \
                    -exportPath build/Release-iphoneos \
                    CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
          
          echo "‚úÖ Build completed. IPA location:"
          find build -name "*.ipa"

    artifacts:
      - iosbuild/$APP_NAME-ios/build/Release-iphoneos/*.ipa 
